local assert = require('luassert')

local helper = require('spec.helper')

local go_to_test_file = require('go_to_test_file')
local path = require('go_to_test_file.path')
local system = require('go_to_test_file.system')
local cmd = require('go_to_test_file.cmd')

describe('go_to_test_file', function()
  describe('vim.cmd', function()
    go_to_test_file.register_vim_cmds()
    go_to_test_file.config.print_command_result = false
    describe('FindPeerSourceFile', function()
      it('will not be broken', function()
        vim.cmd('FindPeerSourceFile')
      end)
    end)
    describe('FindPeerTestFile', function()
      it('will not be broken', function()
        vim.cmd('FindPeerTestFile')
      end)
    end)
    describe('FindSrcFolderSourceFile', function()
      it('will not be broken', function()
        vim.cmd('FindSrcFolderSourceFile')
      end)
    end)
    describe('FindTestFolderTestFile', function()
      it('will not be broken', function()
        vim.cmd('FindTestFolderTestFile')
      end)
    end)
    describe('FindPeerDunderSourceFile', function()
      it('will not be broken', function()
        vim.cmd('FindPeerDunderSourceFile')
      end)
    end)
    describe('FindPeerDunderTestFile', function()
      it('will not be broken', function()
        vim.cmd('FindPeerDunderTestFile')
      end)
    end)
    describe('FindTestOrSourceFile', function()
      it('will not be broken', function()
        vim.cmd('FindTestOrSourceFile')
      end)
    end)
  end)
  describe('find_test_or_source_file_from_either', function()
    it('will find the test file of the file path passed in', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))

      local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file.lua')
      local expected = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file_spec.lua')
      local actual = go_to_test_file.find_test_or_source_file_from_either(src_file)
      assert.are.equal(expected, actual[1])
    end)
    it('will find the src file of the file path passed in', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))

      local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file.lua')
      local test_file = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file_spec.lua')
      local actual = go_to_test_file.find_test_or_source_file_from_either(test_file)
      assert.are.equal(src_file, actual[1])
    end)
    describe('deep path', function()
      it('will find the test file of the file path passed in', function()
        local file_folder_abs_path = path.script_path(system.name)
        local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
        local git_root = vim.fn.trim(vim.fn.system(cmmd))

        local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file', 'list.lua')
        local expected = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file', 'list_spec.lua')
        local actual = go_to_test_file.find_test_or_source_file_from_either(src_file)
        assert.are.equal(expected, actual[1])
      end)
      it('will find the src file of the file path passed in', function()
        local file_folder_abs_path = path.script_path(system.name)
        local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
        local git_root = vim.fn.trim(vim.fn.system(cmmd))

        local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file', 'list.lua')
        local test_file = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file', 'list_spec.lua')
        local actual = go_to_test_file.find_test_or_source_file_from_either(test_file)
        assert.are.equal(src_file, actual[1])
      end)
    end)
  end)
  describe('peer_dunder_tests', function()
    it('will find the test file of the file path passed in', function()
      local ps = path.separator(system.name())
      local fixture_project_root = path.join(ps, helper.fixtures_path(), 'fake-peer-dunder-tests-project')

      local src_file = path.join(path.separator(system.name), fixture_project_root, 'src', 'app.js')
      local test_file = path.join(path.separator(system.name), fixture_project_root, 'src', '__tests__', 'app.js')
      local actual = go_to_test_file.find_test_or_source_file_from_either(src_file)
      assert.are.equal(test_file, actual[1])
    end)
    it('will find the src file of the file path passed in', function()
      local ps = path.separator(system.name())
      local fixture_project_root = path.join(ps, helper.fixtures_path(), 'fake-peer-dunder-tests-project')

      local src_file = path.join(path.separator(system.name), fixture_project_root, 'src', 'app.js')
      local test_file = path.join(path.separator(system.name), fixture_project_root, 'src', '__tests__', 'app.js')
      local actual = go_to_test_file.find_test_or_source_file_from_either(test_file)
      assert.are.equal(src_file, actual[1])
    end)
  end)
  describe('find_test_or_source_file_with_fallback', function()
    it('will find the test file of the file path passed in', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))

      local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file.lua')
      local expected = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file_spec.lua')
      local actual = go_to_test_file.find_test_or_source_file_with_fallback(src_file)
      assert.are.equal(expected, actual)
    end)
    it('will find the src file of the file path passed in', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))

      local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file.lua')
      local test_file = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file_spec.lua')
      local actual = go_to_test_file.find_test_or_source_file_with_fallback(test_file)
      assert.are.equal(src_file, actual)
    end)
    describe('deep path', function()
      it('will find the test file of the file path passed in', function()
        local file_folder_abs_path = path.script_path(system.name)
        local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
        local git_root = vim.fn.trim(vim.fn.system(cmmd))

        local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file', 'list.lua')
        local expected = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file', 'list_spec.lua')
        local actual = go_to_test_file.find_test_or_source_file_with_fallback(src_file)
        assert.are.equal(expected, actual)
      end)
      it('will find the src file of the file path passed in', function()
        local file_folder_abs_path = path.script_path(system.name)
        local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
        local git_root = vim.fn.trim(vim.fn.system(cmmd))

        local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file', 'list.lua')
        local test_file = path.join(path.separator(system.name), git_root, 'spec', 'go_to_test_file', 'list_spec.lua')
        local actual = go_to_test_file.find_test_or_source_file_with_fallback(test_file)
        assert.are.equal(src_file, actual)
      end)
    end)
  end)
  describe('peer_dunder_tests', function()
    it('will find the test file of the file path passed in', function()
      local ps = path.separator(system.name())
      local fixture_project_root = path.join(ps, helper.fixtures_path(), 'fake-peer-dunder-tests-project')

      local src_file = path.join(path.separator(system.name), fixture_project_root, 'src', 'app.js')
      local test_file = path.join(path.separator(system.name), fixture_project_root, 'src', '__tests__', 'app.js')
      local actual = go_to_test_file.find_test_or_source_file_with_fallback(src_file)
      assert.are.equal(test_file, actual)
    end)
    it('will find the src file of the file path passed in', function()
      local ps = path.separator(system.name())
      local fixture_project_root = path.join(ps, helper.fixtures_path(), 'fake-peer-dunder-tests-project')

      local src_file = path.join(path.separator(system.name), fixture_project_root, 'src', 'app.js')
      local test_file = path.join(path.separator(system.name), fixture_project_root, 'src', '__tests__', 'app.js')
      local actual = go_to_test_file.find_test_or_source_file_with_fallback(test_file)
      assert.are.equal(src_file, actual)
    end)
  end)
end)
