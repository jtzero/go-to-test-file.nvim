local assert = require('luassert')

local system = require('go_to_test_file.system')
local path = require('go_to_test_file.path')
local cmd = require('go_to_test_file.cmd')
local peer = require('go_to_test_file.peer')

describe('peer', function()
  describe('should_have_source_file', function()
    it('returns true if the test code file has a peer test file', function()
      local expected = true
      local tst_file = path.join(path.separator(system.name), path.script_path(system.name), 'tst', 'fake-source-code-file.test.ts')
      local actual = peer.should_have_source_file(tst_file)
      assert.are.equal(expected, actual)
    end)
  end)
  describe('find_source_file', function()
    it('will find the corresponding peer src file', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))
      local tst_file = path.join(path.separator(system.name), git_root, 'fixtures', 'fake-peer-project', 'src', 'go-to-test-file', 'fake-source-code-file.test.ts')
      local expected = path.join(path.separator(system.name), git_root, 'fixtures', 'fake-peer-project', 'src', 'go-to-test-file', 'fake-source-code-file.ts')
      local actual = peer.find_source_file(tst_file)
      assert.are.equal(expected, actual)
    end)
  end)
  describe('find_test_file', function()
    it('will find the corresponding peer test file', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))
      local expected = path.join(path.separator(system.name), git_root, 'fixtures', 'fake-peer-project', 'src', 'go-to-test-file', 'fake-source-code-file.test.ts')
      local src_file = path.join(path.separator(system.name), git_root, 'fixtures', 'fake-peer-project', 'src', 'go-to-test-file', 'fake-source-code-file.ts')
      local actual = peer.find_test_file(src_file)
      assert.are.equal(expected, actual)
    end)
  end)
end)
