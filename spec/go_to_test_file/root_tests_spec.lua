local assert = require('luassert')

local path = require('go_to_test_file.path')
local system = require('go_to_test_file.system')
local cmd = require('go_to_test_file.cmd')
local git = require('go_to_test_file.git')
local project_generic = require('go_to_test_file.project_generic')
local list = require('go_to_test_file.list')
local helper = require('spec.helper')
local root_tests = require('go_to_test_file.root_tests')

describe('root_tests', function()
  describe('test_path_from_filepath', function()
    it('returns the abs of the test folder from the path', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))
      local expected = path.join(path.separator(system.name), git_root, 'spec')
      local tst = path.join(path.separator(system.name), file_folder_abs_path, 'project_spec.lua')
      local actual = root_tests.test_path_from_filepath(tst)
      assert.are.equal(expected, actual)
    end)
  end)
  describe('find_source_file', function()
    it('returns the coressponding source file from a root test folder project', function()
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local project_root_abs_path = vim.fn.trim(vim.fn.system(cmmd))
      local test_foldername = 'spec'
      local test_filename_without_test_identifiers = 'root_tests'

      local actual = root_tests.find_source_file(project_root_abs_path, test_foldername, test_filename_without_test_identifiers)
      local expected = path.join(path.separator(system.name), project_root_abs_path, 'lua', 'go_to_test_file', 'root_tests.lua')
      assert.are.equal(expected, actual)
    end)
  end)
  describe('project_root_from_test_folder', function()
    it('returns the folder path one dir up', function()
      local file_folder_abs_path = path.script_path(system.name)
      local git_root = git.repo_root_of_folder(file_folder_abs_path)
      local test_folder = path.join(path.separator(system.name), git_root, 'spec')
      local actual = root_tests.project_root_from_test_folder(test_folder)
      assert.are.equal(git_root, actual)
    end)
  end)
  describe('potential_test_folders', function()
    it('returns potential test folders', function()
      local file_folder_abs_path = path.script_path(system.name)
      local git_root = git.repo_root_of_folder(file_folder_abs_path)
      local actual = root_tests.potential_test_folders(git_root)
      local expected = { git_root .. '/fixtures/fake_root_tests_project/tests', git_root .. '/spec' }
      assert.are.same(expected, actual)
    end)
  end)
  describe('nearest_test_folder', function()
    it('returns the test folder that is closest to the file', function()
      local ps = path.separator(system.name())
      local fixture_project_root = path.join(ps, helper.fixtures_path(), 'fake_root_tests_project')
      local deep_path = path.join(ps, fixture_project_root, 'src', 'go_to_test', 'shopping_cart', 'main.lua')
      local possible_test_paths = root_tests.potential_test_folders(fixture_project_root)
      local actual = root_tests.nearest_test_folder(deep_path, possible_test_paths)
      local expected = path.join(ps, helper.fixtures_path(), 'fake_root_tests_project', 'tests')
      assert.are.equal(expected, actual)
    end)
  end)
  describe('find_test_file', function()
    it('returns the coressponding test file from a root test folder project', function()
      local ps = path.separator(system.name())
      local file_folder_abs_path = path.script_path(system.name)
      local cmmd = cmd.cd_string(file_folder_abs_path) .. ' && git rev-parse --show-toplevel'
      local git_root = vim.fn.trim(vim.fn.system(cmmd))
      local src_file = path.join(path.separator(system.name), git_root, 'lua', 'go_to_test_file', 'root_tests.lua')
      local tst_file = path.join(path.separator(system.name), file_folder_abs_path, 'root_tests_spec.lua')

      local test_paths = root_tests.potential_test_folders(git_root)
      local test_folder = root_tests.nearest_test_folder(src_file, test_paths)
      local project_root = root_tests.project_root_from_test_folder(test_folder)
      local project_root_length = string.len(project_root .. ps)
      local from_root = string.sub(src_file, project_root_length + 1, -1)
      local src_folder_name = list.match_one(from_root, project_generic.src_folder_prefixes, '^', ps, 'no_envelope')
      local src_folder_length = string.len(src_folder_name .. ps)
      local from_root_without_src_folder = string.sub(from_root, src_folder_length + 1, -1)
      local from_root_without_src_folder_no_ext = vim.fn.fnamemodify(from_root_without_src_folder, ':r')
      local actual = root_tests.find_test_file(from_root_without_src_folder_no_ext, test_folder)
      local expected = tst_file
      assert.are.equal(expected, actual)
    end)
  end)
end)
